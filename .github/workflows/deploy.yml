# This file is autogenerated. If you need to change it, please modify source templates foxglove-tech/workflow-templates

name: Publish package

on:
  release:
    types: [ created ]

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - uses: potiuk/cancel-workflow-runs@master
        name: "GitHub / Cancel duplicates"
        with:
          cancelMode: allDuplicates
          token: ${{ secrets.GITHUB_TOKEN }}
          sourceRunId: ${{ github.event.workflow_run.id }}
  
      - name: GitHub / Checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
          fetch-depth: 0 # otherwise, you will failed to push refs to dest repo
  
      - name: Project / Fetch variables
        id: variables
        uses: foxglove-tech/actions-project-variables@master
        with:
          args: --debug
        env:
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_EVENT_ACTION: ${{ github.event.action }}
          GITHUB_EVENT_COMMENT: ${{ github.event.comment.body }}
          GITHUB_REF: ${{ github.ref }}
          GITHUB_SHA: ${{ github.sha }}
  
      - name: Git / Fetch variables
        id: git
        uses: foxglove-tech/actions-git-info@master
        with:
          args: info --debug
        env:
          GITHUB_PR_URL: ${{ github.event.issue.pull_request.url }}${{ github.event.pull_request.url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  
    outputs:
      project_id: ${{ steps.variables.outputs.project_id }}
      project_name: ${{ steps.variables.outputs.project_name }}
      use_black: ${{ steps.variables.outputs.use_black }}
      use_flake8: ${{ steps.variables.outputs.use_flake8 }}
      use_pytest: ${{ steps.variables.outputs.use_pytest }}
      use_dockerlint: ${{ steps.variables.outputs.use_dockerlint }}
      is_library: ${{ steps.variables.outputs.is_library }}
      python_version: ${{ steps.variables.outputs.python_version }}
      workflow: ${{ steps.variables.outputs.workflow }}
      package_version: ${{ steps.variables.outputs.package_version }}
      artifact_version: ${{ steps.variables.outputs.artifact_version }}
      aws_account_key: ${{ steps.variables.outputs.aws_account_key }}
      stage: ${{ steps.variables.outputs.stage }}
      current_commit_tag: ${{ steps.git.outputs.current_commit_tag }}
      previous_tag: ${{ steps.git.outputs.previous_tag }}
      previous_tag_sha: ${{ steps.git.outputs.previous_tag_sha }}
  
      is_mergeable: ${{ steps.git.outputs.is_mergeable }}
      head_branch: ${{ steps.git.outputs.head_branch }}
      head_sha: ${{ steps.git.outputs.head_sha }}
      base_branch: ${{ steps.git.outputs.base_branch }}
      base_sha: ${{ steps.git.outputs.head_sha }}
      deployment_ref: ${{ steps.git.outputs.deployment_ref }}

  package:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: [ prepare ]
    steps:
      - name: GitHub / Start deployment
        uses: tallyb/deployments@master
        id: deployment
        with:
          step: start
          ref: ${{ needs.prepare.outputs.deployment_ref }}
          token: ${{ secrets.GITHUB_TOKEN }}
          env: ${{ needs.prepare.outputs.stage }}

      - name: Checkout
        uses: actions/checkout@v2

      - name: Python / Setup
        uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.prepare.outputs.python_version }}

      - name: Install poetry
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: 1.1.4

      - name: Publish package
        run: |
          poetry config repositories.fury https://push.fury.io/epsy/
          poetry publish --build --username=${GEMFURY_TOKEN} --password=NOPASS -r fury
        env:
          GEMFURY_TOKEN: ${{ secrets.GEMFURY_TOKEN }}

      - name: Slack / Notifiy
        uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#engineering-ci'
        if: always()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: GitHub / Update deployment status
        uses: tallyb/deployments@master
        if: ${{ always() }}
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}